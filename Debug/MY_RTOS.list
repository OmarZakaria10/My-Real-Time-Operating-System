
MY_RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001234  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001364  08001364  00011364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001398  08001398  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001398  08001398  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001398  08001398  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080013a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000004  080013a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  080013a4  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000736e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001258  00000000  00000000  0002739b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001780  00000000  00000000  000285f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000390  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000308  00000000  00000000  0002a108  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002dc3  00000000  00000000  0002a410  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003c46  00000000  00000000  0002d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00014899  00000000  00000000  00030e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000456b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c28  00000000  00000000  00045730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800134c 	.word	0x0800134c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800134c 	.word	0x0800134c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	20000094 	.word	0x20000094

080001a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	20000094 	.word	0x20000094

080001cc <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	20000094 	.word	0x20000094

080001f0 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	20000094 	.word	0x20000094

08000214 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	20000094 	.word	0x20000094

08000238 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x22>
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x40>
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x5e>
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d008      	beq.n	80002b4 <EXTI9_5_IRQHandler+0x7c>
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <EXTI9_5_IRQHandler+0x9a>
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4798      	blx	r3

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	20000094 	.word	0x20000094

080002e0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d008      	beq.n	8000302 <EXTI15_10_IRQHandler+0x22>
 80002f0:	4b2a      	ldr	r3, [pc, #168]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a29      	ldr	r2, [pc, #164]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6153      	str	r3, [r2, #20]
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 80002fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000300:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800030a:	2b00      	cmp	r3, #0
 800030c:	d008      	beq.n	8000320 <EXTI15_10_IRQHandler+0x40>
 800030e:	4b23      	ldr	r3, [pc, #140]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a22      	ldr	r2, [pc, #136]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031e:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000328:	2b00      	cmp	r3, #0
 800032a:	d008      	beq.n	800033e <EXTI15_10_IRQHandler+0x5e>
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a1a      	ldr	r2, [pc, #104]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000336:	6153      	str	r3, [r2, #20]
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d008      	beq.n	800035c <EXTI15_10_IRQHandler+0x7c>
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035a:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI15_10_IRQHandler+0x9a>
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000378:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI15_10_IRQHandler+0xb8>
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800038c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000396:	4798      	blx	r3

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40010400 	.word	0x40010400
 80003a0:	20000094 	.word	0x20000094

080003a4 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 80003ba:	4b37      	ldr	r3, [pc, #220]	; (8000498 <I2C1_EV_IRQHandler+0xe8>)
 80003bc:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003c6:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003d0:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f003 0310 	and.w	r3, r3, #16
 80003da:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00a      	beq.n	80003f8 <I2C1_EV_IRQHandler+0x48>
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 80003f0:	2100      	movs	r1, #0
 80003f2:	6978      	ldr	r0, [r7, #20]
 80003f4:	f000 f852 	bl	800049c <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d012      	beq.n	800042e <I2C1_EV_IRQHandler+0x7e>
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d00f      	beq.n	800042e <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	2b00      	cmp	r3, #0
 8000418:	d109      	bne.n	800042e <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000426:	2102      	movs	r1, #2
 8000428:	6978      	ldr	r0, [r7, #20]
 800042a:	f000 f837 	bl	800049c <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000436:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d00f      	beq.n	800045e <I2C1_EV_IRQHandler+0xae>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d00c      	beq.n	800045e <I2C1_EV_IRQHandler+0xae>
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d009      	beq.n	800045e <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d103      	bne.n	800045e <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000456:	2103      	movs	r1, #3
 8000458:	6978      	ldr	r0, [r7, #20]
 800045a:	f000 f81f 	bl	800049c <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000466:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00f      	beq.n	800048e <I2C1_EV_IRQHandler+0xde>
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00c      	beq.n	800048e <I2C1_EV_IRQHandler+0xde>
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d009      	beq.n	800048e <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b00      	cmp	r3, #0
 8000484:	d103      	bne.n	800048e <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000486:	2104      	movs	r1, #4
 8000488:	6978      	ldr	r0, [r7, #20]
 800048a:	f000 f807 	bl	800049c <Slave_States>
			}
		}



}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40005400 	.word	0x40005400

0800049c <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a32      	ldr	r2, [pc, #200]	; (8000574 <Slave_States+0xd8>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	bf14      	ite	ne
 80004b0:	2301      	movne	r3, #1
 80004b2:	2300      	moveq	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	73fb      	strb	r3, [r7, #15]

	switch (state)
 80004b8:	78fb      	ldrb	r3, [r7, #3]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d856      	bhi.n	800056c <Slave_States+0xd0>
 80004be:	a201      	add	r2, pc, #4	; (adr r2, 80004c4 <Slave_States+0x28>)
 80004c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c4:	080004df 	.word	0x080004df
 80004c8:	080004d9 	.word	0x080004d9
 80004cc:	08000503 	.word	0x08000503
 80004d0:	0800051b 	.word	0x0800051b
 80004d4:	0800053f 	.word	0x0800053f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80004dc:	e046      	b.n	800056c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0304 	and.w	r3, r3, #4
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d03b      	beq.n	8000562 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80004ea:	7bfa      	ldrb	r2, [r7, #15]
 80004ec:	4922      	ldr	r1, [pc, #136]	; (8000578 <Slave_States+0xdc>)
 80004ee:	4613      	mov	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	4413      	add	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	440b      	add	r3, r1
 80004f8:	3320      	adds	r3, #32
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2000      	movs	r0, #0
 80004fe:	4798      	blx	r3
		}

		break ;
 8000500:	e02f      	b.n	8000562 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000502:	7bfa      	ldrb	r2, [r7, #15]
 8000504:	491c      	ldr	r1, [pc, #112]	; (8000578 <Slave_States+0xdc>)
 8000506:	4613      	mov	r3, r2
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	4413      	add	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	3320      	adds	r3, #32
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2002      	movs	r0, #2
 8000516:	4798      	blx	r3

		break ;
 8000518:	e028      	b.n	800056c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	2b00      	cmp	r3, #0
 8000524:	d01f      	beq.n	8000566 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000526:	7bfa      	ldrb	r2, [r7, #15]
 8000528:	4913      	ldr	r1, [pc, #76]	; (8000578 <Slave_States+0xdc>)
 800052a:	4613      	mov	r3, r2
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	4413      	add	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	440b      	add	r3, r1
 8000534:	3320      	adds	r3, #32
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2003      	movs	r0, #3
 800053a:	4798      	blx	r3
		}

		break ;
 800053c:	e013      	b.n	8000566 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10f      	bne.n	800056a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800054a:	7bfa      	ldrb	r2, [r7, #15]
 800054c:	490a      	ldr	r1, [pc, #40]	; (8000578 <Slave_States+0xdc>)
 800054e:	4613      	mov	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	4413      	add	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	3320      	adds	r3, #32
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2004      	movs	r0, #4
 800055e:	4798      	blx	r3
		}

		break ;
 8000560:	e003      	b.n	800056a <Slave_States+0xce>
		break ;
 8000562:	bf00      	nop
 8000564:	e002      	b.n	800056c <Slave_States+0xd0>
		break ;
 8000566:	bf00      	nop
 8000568:	e000      	b.n	800056c <Slave_States+0xd0>
		break ;
 800056a:	bf00      	nop
	}
	}

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40005400 	.word	0x40005400
 8000578:	20000020 	.word	0x20000020

0800057c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <SPI1_IRQHandler>:

/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [0]();
 8000598:	4b02      	ldr	r3, [pc, #8]	; (80005a4 <SPI1_IRQHandler+0x10>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4798      	blx	r3
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000068 	.word	0x20000068

080005a8 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [1]();
 80005ac:	4b02      	ldr	r3, [pc, #8]	; (80005b8 <SPI2_IRQHandler+0x10>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4798      	blx	r3
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000068 	.word	0x20000068

080005bc <USART1_IRQHandler>:
}



void USART1_IRQHandler (void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [0]();
 80005c0:	4b02      	ldr	r3, [pc, #8]	; (80005cc <USART1_IRQHandler+0x10>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4798      	blx	r3
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000070 	.word	0x20000070

080005d0 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [1]();
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <USART2_IRQHandler+0x10>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4798      	blx	r3
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000070 	.word	0x20000070

080005e4 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [2]();
 80005e8:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <USART3_IRQHandler+0x10>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4798      	blx	r3
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000070 	.word	0x20000070

080005f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db0a      	blt.n	8000622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	490c      	ldr	r1, [pc, #48]	; (8000644 <__NVIC_SetPriority+0x4c>)
 8000612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000616:	0152      	lsls	r2, r2, #5
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	440b      	add	r3, r1
 800061c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000620:	e00a      	b.n	8000638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4908      	ldr	r1, [pc, #32]	; (8000648 <__NVIC_SetPriority+0x50>)
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	f003 030f 	and.w	r3, r3, #15
 800062e:	3b04      	subs	r3, #4
 8000630:	0152      	lsls	r2, r2, #5
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	440b      	add	r3, r1
 8000636:	761a      	strb	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800065c:	d301      	bcc.n	8000662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800065e:	2301      	movs	r3, #1
 8000660:	e00f      	b.n	8000682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <SysTick_Config+0x40>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800066a:	2107      	movs	r1, #7
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f7ff ffc2 	bl	80005f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <SysTick_Config+0x40>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <SysTick_Config+0x40>)
 800067c:	2207      	movs	r2, #7
 800067e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	e000e010 	.word	0xe000e010

08000690 <HardFault_Handler>:
 *  Created on: Apr 26, 2024
 *      Author: Omar Zakaria
 */
#include "CortexMX_OS_porting.h"

void HardFault_Handler(void) {
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <MemManage_Handler>:
void MemManage_Handler(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <BusFault_Handler>:
void BusFault_Handler(void) {
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <UsageFault_Handler>:
void UsageFault_Handler(void) {
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <SVC_Handler>:

__attribute((naked)) void SVC_Handler() {
	//	SWITCH_CPU_AccessLevel (privileged);
	__asm ("tst lr, #4 \n\t"
 80006c0:	f01e 0f04 	tst.w	lr, #4
 80006c4:	bf0c      	ite	eq
 80006c6:	f3ef 8008 	mrseq	r0, MSP
 80006ca:	f3ef 8009 	mrsne	r0, PSP
 80006ce:	f000 bba5 	b.w	8000e1c <OS_SVC>
			"ITE EQ \n\t" //To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction.
			"mrseq r0,MSP \n\t "
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 80006d2:	bf00      	nop

080006d4 <HW_init>:
void HW_init()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	//	X count -> 1 ms
	//	X = 8000 Count

	//	decrease PenSV  interrupt priority to be  smaller than or equal  SySTICK Timer
	//SysTICK have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 80006d8:	210f      	movs	r1, #15
 80006da:	f06f 0001 	mvn.w	r0, #1
 80006de:	f7ff ff8b 	bl	80005f8 <__NVIC_SetPriority>
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 80006e2:	210f      	movs	r1, #15
 80006e4:	f06f 0001 	mvn.w	r0, #1
 80006e8:	f7ff ff86 	bl	80005f8 <__NVIC_SetPriority>

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <trigger_OS_PendSV>:

void trigger_OS_PendSV()
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <trigger_OS_PendSV+0x18>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	4a03      	ldr	r2, [pc, #12]	; (8000708 <trigger_OS_PendSV+0x18>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6053      	str	r3, [r2, #4]

}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Start_Ticker>:
int sysled =0;
void Start_Ticker(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	//each 1 ms

	SysTick_Config(8000);
 8000710:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000714:	f7ff ff9a 	bl	800064c <SysTick_Config>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <SysTick_Handler>:

void SysTick_Handler(void){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
sysled ^=1;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SysTick_Handler+0x1c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	4a03      	ldr	r2, [pc, #12]	; (8000738 <SysTick_Handler+0x1c>)
 800072a:	6013      	str	r3, [r2, #0]
	Decide_whatNext();
 800072c:	f000 fb24 	bl	8000d78 <Decide_whatNext>
	//switch context and restore
	trigger_OS_PendSV();
 8000730:	f7ff ffde 	bl	80006f0 <trigger_OS_PendSV>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000007c 	.word	0x2000007c

0800073c <FIFO_init>:



#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d101      	bne.n	8000752 <FIFO_init+0x16>
		return FIFO_NULL;
 800074e:	2303      	movs	r3, #3
 8000750:	e011      	b.n	8000776 <FIFO_init+0x3a>

	fifo->base = buff ;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000774:	2300      	movs	r3, #0

}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <FIFO_enqueue+0x1a>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800079a:	2303      	movs	r3, #3
 800079c:	e02d      	b.n	80007fa <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d107      	bne.n	80007ba <FIFO_enqueue+0x3a>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d101      	bne.n	80007ba <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e01f      	b.n	80007fa <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	68d2      	ldr	r2, [r2, #12]
 80007d4:	4611      	mov	r1, r2
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	6912      	ldr	r2, [r2, #16]
 80007da:	0092      	lsls	r2, r2, #2
 80007dc:	440a      	add	r2, r1
 80007de:	3a04      	subs	r2, #4
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d104      	bne.n	80007ee <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68da      	ldr	r2, [r3, #12]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	e004      	b.n	80007f8 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	1d1a      	adds	r2, r3, #4
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 80007f8:	2300      	movs	r3, #0


}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <FIFO_dequeue+0x1a>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 800081e:	2303      	movs	r3, #3
 8000820:	e028      	b.n	8000874 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685a      	ldr	r2, [r3, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 800082e:	2302      	movs	r3, #2
 8000830:	e020      	b.n	8000874 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	68d2      	ldr	r2, [r2, #12]
 800084e:	4611      	mov	r1, r2
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6912      	ldr	r2, [r2, #16]
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	440a      	add	r2, r1
 8000858:	3a04      	subs	r2, #4
 800085a:	4293      	cmp	r3, r2
 800085c:	d104      	bne.n	8000868 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68da      	ldr	r2, [r3, #12]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	e004      	b.n	8000872 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	1d1a      	adds	r2, r3, #4
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <PendSV_Handler>:
__attribute ((naked)) void PendSV_Handler() {
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000880:	4b6f      	ldr	r3, [pc, #444]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000882:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000886:	f3ef 8009 	mrs	r0, PSP
 800088a:	4602      	mov	r2, r0
 800088c:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 800088e:	4b6c      	ldr	r3, [pc, #432]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000890:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000894:	699a      	ldr	r2, [r3, #24]
 8000896:	3a04      	subs	r2, #4
 8000898:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800089a:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <PendSV_Handler+0x1c0>)
 800089c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4622      	mov	r2, r4
 80008a4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80008a6:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	3a04      	subs	r2, #4
 80008b0:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80008b2:	4b63      	ldr	r3, [pc, #396]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	462a      	mov	r2, r5
 80008bc:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008c4:	699a      	ldr	r2, [r3, #24]
 80008c6:	3a04      	subs	r2, #4
 80008c8:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80008ca:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4632      	mov	r2, r6
 80008d4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80008d6:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008dc:	699a      	ldr	r2, [r3, #24]
 80008de:	3a04      	subs	r2, #4
 80008e0:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80008e2:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	463a      	mov	r2, r7
 80008ec:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80008ee:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	3a04      	subs	r2, #4
 80008f8:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80008fa:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <PendSV_Handler+0x1c0>)
 80008fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4642      	mov	r2, r8
 8000904:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000906:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000908:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	3a04      	subs	r2, #4
 8000910:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000912:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000914:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	464a      	mov	r2, r9
 800091c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800091e:	4b48      	ldr	r3, [pc, #288]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000920:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	3a04      	subs	r2, #4
 8000928:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800092a:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <PendSV_Handler+0x1c0>)
 800092c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4652      	mov	r2, sl
 8000934:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000938:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800093c:	699a      	ldr	r2, [r3, #24]
 800093e:	3a04      	subs	r2, #4
 8000940:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000944:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	465a      	mov	r2, fp
 800094c:	601a      	str	r2, [r3, #0]
	//already saved in Current_PSP

	//====================================
	//Restore the Context of the Next Task
	//====================================
	if (OS_Control.NextTask != NULL) {
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000950:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000954:	2b00      	cmp	r3, #0
 8000956:	d009      	beq.n	800096c <PendSV_Handler+0xec>
		OS_Control.CurrentTask = OS_Control.NextTask;
 8000958:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <PendSV_Handler+0x1c0>)
 800095a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800095e:	4a38      	ldr	r2, [pc, #224]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000960:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL;
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000966:	2200      	movs	r2, #0
 8000968:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("MOV r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800096c:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <PendSV_Handler+0x1c0>)
 800096e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000978:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <PendSV_Handler+0x1c0>)
 800097a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	3204      	adds	r2, #4
 8000982:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000986:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000992:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000996:	699a      	ldr	r2, [r3, #24]
 8000998:	3204      	adds	r2, #4
 800099a:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV r9,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <PendSV_Handler+0x1c0>)
 800099e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ae:	699a      	ldr	r2, [r3, #24]
 80009b0:	3204      	adds	r2, #4
 80009b2:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV r8,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c6:	699a      	ldr	r2, [r3, #24]
 80009c8:	3204      	adds	r2, #4
 80009ca:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV r7,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009de:	699a      	ldr	r2, [r3, #24]
 80009e0:	3204      	adds	r2, #4
 80009e2:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV r6,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009f6:	699a      	ldr	r2, [r3, #24]
 80009f8:	3204      	adds	r2, #4
 80009fa:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV r5,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <PendSV_Handler+0x1c0>)
 80009fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000a0a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	3204      	adds	r2, #4
 8000a12:	619a      	str	r2, [r3, #24]
	__asm volatile("MOV r4,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000a16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000a22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a26:	699a      	ldr	r2, [r3, #24]
 8000a28:	3204      	adds	r2, #4
 8000a2a:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <PendSV_Handler+0x1c0>)
 8000a2e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 8000a3a:	4770      	bx	lr

}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	200000d0 	.word	0x200000d0

08000a44 <MYRTOS_IdleTask>:
char IdleTaskLed =0;
void MYRTOS_IdleTask()
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	//
	//		In general, when you want to wait for any type of interrupt, you can use the "wfi" instruction, but if you want to wait for a specific event, you would use the "wfe" instruction, as it allows you to wait for a specific event, rather than any interrupt.
	//
	while(1)
	{
		IdleTaskLed ^= 1 ;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <MYRTOS_IdleTask+0x18>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f083 0301 	eor.w	r3, r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <MYRTOS_IdleTask+0x18>)
 8000a54:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 8000a56:	bf20      	wfe
		IdleTaskLed ^= 1 ;
 8000a58:	e7f6      	b.n	8000a48 <MYRTOS_IdleTask+0x4>
 8000a5a:	bf00      	nop
 8000a5c:	20000080 	.word	0x20000080

08000a60 <RTOS_Create_MainStack>:
	}

}
RTOS_Create_MainStack() {
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	OS_Control._S_MSP = &_estack;
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <RTOS_Create_MainStack+0x34>)
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <RTOS_Create_MainStack+0x38>)
 8000a68:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <RTOS_Create_MainStack+0x38>)
 8000a6e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000a72:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <RTOS_Create_MainStack+0x38>)
 8000a78:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP - 8);
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <RTOS_Create_MainStack+0x38>)
 8000a7e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000a82:	3b08      	subs	r3, #8
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <RTOS_Create_MainStack+0x38>)
 8000a86:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000a8a:	bf00      	nop
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20005000 	.word	0x20005000
 8000a98:	200000d0 	.word	0x200000d0

08000a9c <MYRTOS_Init>:

MYRTOS_ErrorID MYRTOS_Init() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	MYRTOS_ErrorID error = NoError;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	OS_Control.OSMode = OS_Suspended;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MYRTOS_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	RTOS_Create_MainStack();
 8000aae:	f7ff ffd7 	bl	8000a60 <RTOS_Create_MainStack>
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) != FIFO_NO_ERROR) {
 8000ab2:	2264      	movs	r2, #100	; 0x64
 8000ab4:	4913      	ldr	r1, [pc, #76]	; (8000b04 <MYRTOS_Init+0x68>)
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <MYRTOS_Init+0x6c>)
 8000ab8:	f7ff fe40 	bl	800073c <FIFO_init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <MYRTOS_Init+0x2c>
		error += Ready_Queue_init_error;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	71fb      	strb	r3, [r7, #7]
	}
	//Configure IDLE TASK
	strcpy(MYRTOS_idleTask.TaskName, "idleTask");
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MYRTOS_Init+0x70>)
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <MYRTOS_Init+0x74>)
 8000acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ace:	c303      	stmia	r3!, {r0, r1}
 8000ad0:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.Priority = 255;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MYRTOS_Init+0x78>)
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MYRTOS_Init+0x78>)
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <MYRTOS_Init+0x7c>)
 8000adc:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <MYRTOS_Init+0x78>)
 8000ae0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ae4:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <MYRTOS_Init+0x78>)
 8000ae8:	f000 f858 	bl	8000b9c <MYRTOS_CreateTask>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	4413      	add	r3, r2
 8000af4:	71fb      	strb	r3, [r7, #7]

	return error;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000d0 	.word	0x200000d0
 8000b04:	200002d4 	.word	0x200002d4
 8000b08:	2000027c 	.word	0x2000027c
 8000b0c:	200002ac 	.word	0x200002ac
 8000b10:	08001364 	.word	0x08001364
 8000b14:	20000290 	.word	0x20000290
 8000b18:	08000a45 	.word	0x08000a45

08000b1c <MyRTOS_Create_TaskStack>:

MyRTOS_Create_TaskStack(TASK *Tref) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	1f1a      	subs	r2, r3, #4
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b40:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	1f1a      	subs	r2, r3, #4
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int) Tref->p_TaskEntry; //PC
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	1f1a      	subs	r2, r3, #4
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f06f 0202 	mvn.w	r2, #2
 8000b68:	601a      	str	r2, [r3, #0]

	for (int j = 0; j < 13; j++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	e00b      	b.n	8000b88 <MyRTOS_Create_TaskStack+0x6c>
		Tref->Current_PSP--;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	1f1a      	subs	r2, r3, #4
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 13; j++) {
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3301      	adds	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b0c      	cmp	r3, #12
 8000b8c:	ddf0      	ble.n	8000b70 <MyRTOS_Create_TaskStack+0x54>

	}

}
 8000b8e:	bf00      	nop
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
	...

08000b9c <MYRTOS_CreateTask>:
MYRTOS_ErrorID MYRTOS_CreateTask(TASK *Tref) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	MYRTOS_ErrorID error = NoError;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

	//Create Its OWN PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MYRTOS_CreateTask+0x74>)
 8000baa:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	691a      	ldr	r2, [r3, #16]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1ad2      	subs	r2, r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	615a      	str	r2, [r3, #20]
	//	- _E_PSP_Task	-
	//	-				-
	//	- _eheap		-
	//	-				-
	//
	if (Tref->_E_PSP_Task < (unsigned int)(&(_eheap)))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MYRTOS_CreateTask+0x78>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d201      	bcs.n	8000bce <MYRTOS_CreateTask+0x32>

	{
		return Task_exceeded_StackSize;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e01b      	b.n	8000c06 <MYRTOS_CreateTask+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	3b08      	subs	r3, #8
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <MYRTOS_CreateTask+0x74>)
 8000bd6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack(Tref);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff9e 	bl	8000b1c <MyRTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.N_Active_Tasks]= Tref ;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MYRTOS_CreateTask+0x74>)
 8000be2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000be6:	490a      	ldr	r1, [pc, #40]	; (8000c10 <MYRTOS_CreateTask+0x74>)
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.N_Active_Tasks++ ;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MYRTOS_CreateTask+0x74>)
 8000bf0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <MYRTOS_CreateTask+0x74>)
 8000bf8:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c


	//Task State Update -> Suspend
	Tref->TaskState = Suspended ;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000d0 	.word	0x200000d0
 8000c14:	20000bb0 	.word	0x20000bb0

08000c18 <bubbleSort>:
void bubbleSort()
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	TASK* temp ;
	n = OS_Control.N_Active_Tasks ;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <bubbleSort+0x8c>)
 8000c20:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000c24:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e030      	b.n	8000c8e <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	e023      	b.n	8000c7a <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->Priority > OS_Control.OSTasks[j + 1]->Priority)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <bubbleSort+0x8c>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3a:	791a      	ldrb	r2, [r3, #4]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4918      	ldr	r1, [pc, #96]	; (8000ca4 <bubbleSort+0x8c>)
 8000c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c46:	791b      	ldrb	r3, [r3, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d913      	bls.n	8000c74 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 8000c4c:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <bubbleSort+0x8c>)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c54:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <bubbleSort+0x8c>)
 8000c5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c60:	4910      	ldr	r1, [pc, #64]	; (8000ca4 <bubbleSort+0x8c>)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <bubbleSort+0x8c>)
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	3b01      	subs	r3, #1
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3d4      	bcc.n	8000c32 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d3c9      	bcc.n	8000c2c <bubbleSort+0x14>
			}

}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200000d0 	.word	0x200000d0

08000ca8 <MyRTOS_Update_Schadule_tables>:

void MyRTOS_Update_Schadule_tables() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	TASK *temp = NULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
	TASK *Ptask;
	TASK *PnextTask;
	int i = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8000cb6:	f7ff ffaf 	bl	8000c18 <bubbleSort>
	//2- free Ready Queue
	while (FIFO_dequeue(&Ready_QUEUE, &temp /* pointer to pointer */)
 8000cba:	bf00      	nop
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	482b      	ldr	r0, [pc, #172]	; (8000d70 <MyRTOS_Update_Schadule_tables+0xc8>)
 8000cc2:	f7ff fd9f 	bl	8000804 <FIFO_dequeue>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d1f7      	bne.n	8000cbc <MyRTOS_Update_Schadule_tables+0x14>
			!= FIFO_EMPTY)
		;

	//3- update ready queue

	while (i < OS_Control.N_Active_Tasks) {
 8000ccc:	e044      	b.n	8000d58 <MyRTOS_Update_Schadule_tables+0xb0>
		Ptask = OS_Control.OSTasks[i];
 8000cce:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <MyRTOS_Update_Schadule_tables+0xcc>)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i + 1];
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <MyRTOS_Update_Schadule_tables+0xcc>)
 8000cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce2:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspended) {
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d031      	beq.n	8000d52 <MyRTOS_Update_Schadule_tables+0xaa>
			//in case we reached to the end of avaliable OSTASKS
			if (PnextTask->TaskState == Suspended) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d108      	bne.n	8000d0a <MyRTOS_Update_Schadule_tables+0x62>
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	481d      	ldr	r0, [pc, #116]	; (8000d70 <MyRTOS_Update_Schadule_tables+0xc8>)
 8000cfc:	f7ff fd40 	bl	8000780 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2202      	movs	r2, #2
 8000d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000d08:	e02e      	b.n	8000d68 <MyRTOS_Update_Schadule_tables+0xc0>
			}
			//	if the Ptask priority > nexttask then (lowest number is meaning higher priority)
			if (Ptask->Priority < PnextTask->Priority) {
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	791a      	ldrb	r2, [r3, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	791b      	ldrb	r3, [r3, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d208      	bcs.n	8000d28 <MyRTOS_Update_Schadule_tables+0x80>
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	4815      	ldr	r0, [pc, #84]	; (8000d70 <MyRTOS_Update_Schadule_tables+0xc8>)
 8000d1a:	f7ff fd31 	bl	8000780 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2202      	movs	r2, #2
 8000d22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000d26:	e01f      	b.n	8000d68 <MyRTOS_Update_Schadule_tables+0xc0>
			} else if (Ptask->Priority == PnextTask->Priority) {
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	791a      	ldrb	r2, [r3, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d108      	bne.n	8000d46 <MyRTOS_Update_Schadule_tables+0x9e>
				//	if the Ptask priority == nexttask then
				//		push Ptask to ready state
				//	And make the ptask = nexttask  and nexttask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <MyRTOS_Update_Schadule_tables+0xc8>)
 8000d38:	f7ff fd22 	bl	8000780 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000d44:	e005      	b.n	8000d52 <MyRTOS_Update_Schadule_tables+0xaa>
			} else if (Ptask->Priority > PnextTask->Priority) {
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	791a      	ldrb	r2, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d809      	bhi.n	8000d66 <MyRTOS_Update_Schadule_tables+0xbe>
				//not allowed to happen as we already reordered it by bubble sort
				break;
			}
		}

		i++;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
	while (i < OS_Control.N_Active_Tasks) {
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MyRTOS_Update_Schadule_tables+0xcc>)
 8000d5a:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8b4      	bhi.n	8000cce <MyRTOS_Update_Schadule_tables+0x26>
	}

}
 8000d64:	e000      	b.n	8000d68 <MyRTOS_Update_Schadule_tables+0xc0>
				break;
 8000d66:	bf00      	nop
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000027c 	.word	0x2000027c
 8000d74:	200000d0 	.word	0x200000d0

08000d78 <Decide_whatNext>:

void Decide_whatNext()
	{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
		//if Ready Queue is empty && OS_Control->currentTask != suspend
		if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspended) //FIFO_EMPTY
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <Decide_whatNext+0x98>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11a      	bne.n	8000dba <Decide_whatNext+0x42>
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <Decide_whatNext+0x9c>)
 8000d86:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d013      	beq.n	8000dba <Decide_whatNext+0x42>
		{
			OS_Control.CurrentTask->TaskState = Running ;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <Decide_whatNext+0x9c>)
 8000d94:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d98:	2203      	movs	r2, #3
 8000d9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			//add the current task again(round robin)
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <Decide_whatNext+0x9c>)
 8000da0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000da4:	4619      	mov	r1, r3
 8000da6:	481a      	ldr	r0, [pc, #104]	; (8000e10 <Decide_whatNext+0x98>)
 8000da8:	f7ff fcea 	bl	8000780 <FIFO_enqueue>
			OS_Control.NextTask = OS_Control.CurrentTask ;
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <Decide_whatNext+0x9c>)
 8000dae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000db2:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <Decide_whatNext+0x9c>)
 8000db4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			{
				FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
				OS_Control.CurrentTask->TaskState = Ready ;
			}
		}
	}
 8000db8:	e027      	b.n	8000e0a <Decide_whatNext+0x92>
			FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 8000dba:	4917      	ldr	r1, [pc, #92]	; (8000e18 <Decide_whatNext+0xa0>)
 8000dbc:	4814      	ldr	r0, [pc, #80]	; (8000e10 <Decide_whatNext+0x98>)
 8000dbe:	f7ff fd21 	bl	8000804 <FIFO_dequeue>
			OS_Control.NextTask->TaskState = Running ;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <Decide_whatNext+0x9c>)
 8000dc4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000dc8:	2203      	movs	r2, #3
 8000dca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			if ((OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority )&&(OS_Control.CurrentTask->TaskState != Suspended))
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <Decide_whatNext+0x9c>)
 8000dd0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000dd4:	791a      	ldrb	r2, [r3, #4]
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <Decide_whatNext+0x9c>)
 8000dd8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d113      	bne.n	8000e0a <Decide_whatNext+0x92>
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <Decide_whatNext+0x9c>)
 8000de4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000de8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00c      	beq.n	8000e0a <Decide_whatNext+0x92>
				FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <Decide_whatNext+0x9c>)
 8000df2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <Decide_whatNext+0x98>)
 8000dfa:	f7ff fcc1 	bl	8000780 <FIFO_enqueue>
				OS_Control.CurrentTask->TaskState = Ready ;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <Decide_whatNext+0x9c>)
 8000e00:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e04:	2202      	movs	r2, #2
 8000e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000027c 	.word	0x2000027c
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	20000274 	.word	0x20000274

08000e1c <OS_SVC>:



void OS_SVC(int *Stack_Frame) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,return address (PC) and XPSR
	unsigned char SVC_number;
	SVC_number = *((unsigned char*) (((unsigned char*) Stack_Frame[6]) - 2));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3318      	adds	r3, #24
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3b02      	subs	r3, #2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	73fb      	strb	r3, [r7, #15]

	switch (SVC_number) {
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db1f      	blt.n	8000e76 <OS_SVC+0x5a>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	dd02      	ble.n	8000e40 <OS_SVC+0x24>
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d017      	beq.n	8000e6e <OS_SVC+0x52>
		MyRTOS_Update_Schadule_tables();

		break;
	}

}
 8000e3e:	e01a      	b.n	8000e76 <OS_SVC+0x5a>
		MyRTOS_Update_Schadule_tables();
 8000e40:	f7ff ff32 	bl	8000ca8 <MyRTOS_Update_Schadule_tables>
		if (OS_Control.OSMode == OS_Running) {
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <OS_SVC+0x64>)
 8000e46:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d112      	bne.n	8000e74 <OS_SVC+0x58>
			if (strcmp(OS_Control.CurrentTask->TaskName, "idleTask") != 0) {
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <OS_SVC+0x64>)
 8000e50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e54:	331c      	adds	r3, #28
 8000e56:	490b      	ldr	r1, [pc, #44]	; (8000e84 <OS_SVC+0x68>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff f989 	bl	8000170 <strcmp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d007      	beq.n	8000e74 <OS_SVC+0x58>
				Decide_whatNext();
 8000e64:	f7ff ff88 	bl	8000d78 <Decide_whatNext>
				trigger_OS_PendSV();
 8000e68:	f7ff fc42 	bl	80006f0 <trigger_OS_PendSV>
		break;
 8000e6c:	e002      	b.n	8000e74 <OS_SVC+0x58>
		MyRTOS_Update_Schadule_tables();
 8000e6e:	f7ff ff1b 	bl	8000ca8 <MyRTOS_Update_Schadule_tables>
		break;
 8000e72:	e000      	b.n	8000e76 <OS_SVC+0x5a>
		break;
 8000e74:	bf00      	nop
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000d0 	.word	0x200000d0
 8000e84:	08001364 	.word	0x08001364

08000e88 <MYRTOS_OS_SVC_Set>:

int MYRTOS_OS_SVC_Set(SVC_ID ID) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	switch (ID) {
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d817      	bhi.n	8000ec8 <MYRTOS_OS_SVC_Set+0x40>
 8000e98:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <MYRTOS_OS_SVC_Set+0x18>)
 8000e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9e:	bf00      	nop
 8000ea0:	08000eb5 	.word	0x08000eb5
 8000ea4:	08000eb9 	.word	0x08000eb9
 8000ea8:	08000ebd 	.word	0x08000ebd
 8000eac:	08000ec1 	.word	0x08000ec1
 8000eb0:	08000ec5 	.word	0x08000ec5
	case SVC_Activatetask:
		__asm("svc #0x00");
 8000eb4:	df00      	svc	0
		break;
 8000eb6:	e007      	b.n	8000ec8 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_terminateTask:
		__asm("svc #0x01");
 8000eb8:	df01      	svc	1
		break;
 8000eba:	e005      	b.n	8000ec8 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
 8000ebc:	df02      	svc	2
		break;
 8000ebe:	e003      	b.n	8000ec8 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_AquireMutex:
		__asm("svc #0x03");
 8000ec0:	df03      	svc	3
		//Assignment Task
		break;
 8000ec2:	e001      	b.n	8000ec8 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_ReleaseMutex:
		__asm("svc #0x04");
 8000ec4:	df04      	svc	4
		//Assignment Task
		break;
 8000ec6:	bf00      	nop
	}
}
 8000ec8:	bf00      	nop
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <MYRTOS_ActivateTask>:




void MYRTOS_ActivateTask(TASK *Tref) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_Activatetask);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ffcf 	bl	8000e88 <MYRTOS_OS_SVC_Set>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <MYRTOS_TerminateTask>:
void MYRTOS_TerminateTask(TASK *Tref) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Suspended;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_terminateTask);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f7ff ffc0 	bl	8000e88 <MYRTOS_OS_SVC_Set>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <MYRTOS_StartOS>:

void MYRTOS_StartOS(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	OS_Control.OSMode=OS_Running;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MYRTOS_StartOS+0x54>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	OS_Control.CurrentTask=&MYRTOS_idleTask;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MYRTOS_StartOS+0x54>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <MYRTOS_StartOS+0x58>)
 8000f20:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000f24:	4810      	ldr	r0, [pc, #64]	; (8000f68 <MYRTOS_StartOS+0x58>)
 8000f26:	f7ff ffd5 	bl	8000ed4 <MYRTOS_ActivateTask>
	Start_Ticker();
 8000f2a:	f7ff fbef 	bl	800070c <Start_Ticker>
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MYRTOS_StartOS+0x54>)
 8000f30:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f380 8809 	msr	PSP, r0
	OS_SWITCH_SP_to_PSP;
 8000f3c:	f3ef 8014 	mrs	r0, CONTROL
 8000f40:	f04f 0102 	mov.w	r1, #2
 8000f44:	ea40 0001 	orr.w	r0, r0, r1
 8000f48:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_to_unprivileged;
 8000f4c:	f3ef 8314 	mrs	r3, CONTROL
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <MYRTOS_StartOS+0x58>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4798      	blx	r3

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000d0 	.word	0x200000d0
 8000f68:	20000290 	.word	0x20000290

08000f6c <MYRTOS_AcquireMutex>:
	}
}


MYRTOS_ErrorID MYRTOS_AcquireMutex(Mutex_ref* Mref , TASK* Tref)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	if(Mref->CurrentTUser == NULL) //not used
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <MYRTOS_AcquireMutex+0x1a>
	{
		Mref->CurrentTUser = Tref ;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	e010      	b.n	8000fa8 <MYRTOS_AcquireMutex+0x3c>
	}else
	{
		if(Mref->NextTUser == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10a      	bne.n	8000fa4 <MYRTOS_AcquireMutex+0x38>
		{
			Mref->NextTUser = Tref ;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	60da      	str	r2, [r3, #12]
			//move to Suspend state until be released
			Tref->TaskState = Suspended ;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			//to be suspended immediately
			MYRTOS_OS_SVC_Set(SVC_terminateTask);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff ff73 	bl	8000e88 <MYRTOS_OS_SVC_Set>
 8000fa2:	e001      	b.n	8000fa8 <MYRTOS_AcquireMutex+0x3c>
		}else
		{
			return MutexisReacedToMaxNumberOfUsers ;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e000      	b.n	8000faa <MYRTOS_AcquireMutex+0x3e>
		}

	}
	return NoError ;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <MYRTOS_ReleaseMutex>:
void MYRTOS_ReleaseMutex(Mutex_ref* Mref)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	if(Mref->CurrentTUser != NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00e      	beq.n	8000fe0 <MYRTOS_ReleaseMutex+0x2e>
	{
		Mref->CurrentTUser = Mref->NextTUser  ;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
		Mref->NextTUser  = NULL ;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
		Mref->CurrentTUser->TaskState = Waiting ;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		MYRTOS_OS_SVC_Set(SVC_Activatetask);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff ff54 	bl	8000e88 <MYRTOS_OS_SVC_Set>

	}

}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <task1>:
unsigned char Task1LED,Task2LED,Task3LED,Task4LED ;
Mutex_ref Mutex1 ;
unsigned char payload[3] = {1,2,3} ;

void task1()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task1LED ^= 1;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <task1+0x48>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <task1+0x48>)
 8000ff8:	701a      	strb	r2, [r3, #0]
		Count++ ;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <task1+0x4c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <task1+0x4c>)
 8001002:	6013      	str	r3, [r2, #0]
		if (Count == 100 )
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <task1+0x4c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d106      	bne.n	800101a <task1+0x32>
		{
			MYRTOS_AcquireMutex(&Mutex1, &Task1);
 800100c:	490a      	ldr	r1, [pc, #40]	; (8001038 <task1+0x50>)
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <task1+0x54>)
 8001010:	f7ff ffac 	bl	8000f6c <MYRTOS_AcquireMutex>
			MYRTOS_ActivateTask(&Task2);
 8001014:	480a      	ldr	r0, [pc, #40]	; (8001040 <task1+0x58>)
 8001016:	f7ff ff5d 	bl	8000ed4 <MYRTOS_ActivateTask>
		}
		if (Count == 200 )
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <task1+0x4c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2bc8      	cmp	r3, #200	; 0xc8
 8001020:	d1e4      	bne.n	8000fec <task1+0x4>
		{
			Count = 0 ;
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <task1+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&Mutex1);
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <task1+0x54>)
 800102a:	f7ff ffc2 	bl	8000fb2 <MYRTOS_ReleaseMutex>
		Task1LED ^= 1;
 800102e:	e7dd      	b.n	8000fec <task1+0x4>
 8001030:	20000564 	.word	0x20000564
 8001034:	20000084 	.word	0x20000084
 8001038:	200004d8 	.word	0x200004d8
 800103c:	20000464 	.word	0x20000464
 8001040:	20000568 	.word	0x20000568

08001044 <task2>:
		}
	}
}
void task2()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task2LED ^= 1;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <task2+0x40>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f083 0301 	eor.w	r3, r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <task2+0x40>)
 8001054:	701a      	strb	r2, [r3, #0]
		Count++ ;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <task2+0x44>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <task2+0x44>)
 800105e:	6013      	str	r3, [r2, #0]
		if (Count == 100 )
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <task2+0x44>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b64      	cmp	r3, #100	; 0x64
 8001066:	d102      	bne.n	800106e <task2+0x2a>
		{
			MYRTOS_ActivateTask(&Task3);
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <task2+0x48>)
 800106a:	f7ff ff33 	bl	8000ed4 <MYRTOS_ActivateTask>
		}
		if (Count == 200 )
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <task2+0x44>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2bc8      	cmp	r3, #200	; 0xc8
 8001074:	d1e8      	bne.n	8001048 <task2+0x4>
		{
			Count = 0 ;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <task2+0x44>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task2);
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <task2+0x4c>)
 800107e:	f7ff ff38 	bl	8000ef2 <MYRTOS_TerminateTask>
		Task2LED ^= 1;
 8001082:	e7e1      	b.n	8001048 <task2+0x4>
 8001084:	2000051d 	.word	0x2000051d
 8001088:	20000088 	.word	0x20000088
 800108c:	20000520 	.word	0x20000520
 8001090:	20000568 	.word	0x20000568

08001094 <task3>:

		}
	}
}
void task3()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task3LED ^= 1;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <task3+0x40>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f083 0301 	eor.w	r3, r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <task3+0x40>)
 80010a4:	701a      	strb	r2, [r3, #0]
		Count++ ;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <task3+0x44>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <task3+0x44>)
 80010ae:	6013      	str	r3, [r2, #0]
		if (Count == 100 )
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <task3+0x44>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d102      	bne.n	80010be <task3+0x2a>
		{
			MYRTOS_ActivateTask(&Task4);
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <task3+0x48>)
 80010ba:	f7ff ff0b 	bl	8000ed4 <MYRTOS_ActivateTask>
		}
		if (Count == 200 )
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <task3+0x44>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2bc8      	cmp	r3, #200	; 0xc8
 80010c4:	d1e8      	bne.n	8001098 <task3+0x4>
		{
			Count = 0 ;
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <task3+0x44>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task3);
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <task3+0x4c>)
 80010ce:	f7ff ff10 	bl	8000ef2 <MYRTOS_TerminateTask>
		Task3LED ^= 1;
 80010d2:	e7e1      	b.n	8001098 <task3+0x4>
 80010d4:	200005ac 	.word	0x200005ac
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	20000494 	.word	0x20000494
 80010e0:	20000520 	.word	0x20000520

080010e4 <task4>:
		}
	}
}

void task4()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	static int Count = 0 ;
	while (1){
		Task4LED ^= 1;
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <task4+0x48>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <task4+0x48>)
 80010f4:	701a      	strb	r2, [r3, #0]
		Count++ ;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <task4+0x4c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <task4+0x4c>)
 80010fe:	6013      	str	r3, [r2, #0]
		if (Count == 3 )
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <task4+0x4c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d103      	bne.n	8001110 <task4+0x2c>
		{
			MYRTOS_AcquireMutex(&Mutex1, &Task4);
 8001108:	490a      	ldr	r1, [pc, #40]	; (8001134 <task4+0x50>)
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <task4+0x54>)
 800110c:	f7ff ff2e 	bl	8000f6c <MYRTOS_AcquireMutex>
		}

		if (Count == 200 )
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <task4+0x4c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2bc8      	cmp	r3, #200	; 0xc8
 8001116:	d1e7      	bne.n	80010e8 <task4+0x4>
		{
			Count = 0 ;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <task4+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&Mutex1);
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <task4+0x54>)
 8001120:	f7ff ff47 	bl	8000fb2 <MYRTOS_ReleaseMutex>
			MYRTOS_TerminateTask(&Task4);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <task4+0x50>)
 8001126:	f7ff fee4 	bl	8000ef2 <MYRTOS_TerminateTask>
		Task4LED ^= 1;
 800112a:	e7dd      	b.n	80010e8 <task4+0x4>
 800112c:	2000051c 	.word	0x2000051c
 8001130:	20000090 	.word	0x20000090
 8001134:	20000494 	.word	0x20000494
 8001138:	20000464 	.word	0x20000464

0800113c <main>:
		}
	}
}
//priority inversion Example
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

	MYRTOS_ErrorID error;
	//HW_Init (Initialize ClockTree, RestController)
	HW_init();
 8001142:	f7ff fac7 	bl	80006d4 <HW_init>

	if (MYRTOS_Init() != NoError)
 8001146:	f7ff fca9 	bl	8000a9c <MYRTOS_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d000      	beq.n	8001152 <main+0x16>
		while (1);
 8001150:	e7fe      	b.n	8001150 <main+0x14>

	Mutex1.PayloadSize = 3 ;
 8001152:	4b43      	ldr	r3, [pc, #268]	; (8001260 <main+0x124>)
 8001154:	2203      	movs	r2, #3
 8001156:	605a      	str	r2, [r3, #4]
	Mutex1.Ppayload = payload ;
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <main+0x124>)
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <main+0x128>)
 800115c:	601a      	str	r2, [r3, #0]
	strcpy (Mutex1.MutexName, "Mutex1");
 800115e:	4b42      	ldr	r3, [pc, #264]	; (8001268 <main+0x12c>)
 8001160:	4a42      	ldr	r2, [pc, #264]	; (800126c <main+0x130>)
 8001162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001166:	6018      	str	r0, [r3, #0]
 8001168:	3304      	adds	r3, #4
 800116a:	8019      	strh	r1, [r3, #0]
 800116c:	3302      	adds	r3, #2
 800116e:	0c0a      	lsrs	r2, r1, #16
 8001170:	701a      	strb	r2, [r3, #0]

	Task1.Stack_Size = 1024 ;
 8001172:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <main+0x134>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry =task1;
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <main+0x134>)
 800117c:	4a3d      	ldr	r2, [pc, #244]	; (8001274 <main+0x138>)
 800117e:	609a      	str	r2, [r3, #8]
	Task1.Priority= 4 ;
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <main+0x134>)
 8001182:	2204      	movs	r2, #4
 8001184:	711a      	strb	r2, [r3, #4]
	strcpy (Task1.TaskName, "task_1");
 8001186:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <main+0x13c>)
 8001188:	4a3c      	ldr	r2, [pc, #240]	; (800127c <main+0x140>)
 800118a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118e:	6018      	str	r0, [r3, #0]
 8001190:	3304      	adds	r3, #4
 8001192:	8019      	strh	r1, [r3, #0]
 8001194:	3302      	adds	r3, #2
 8001196:	0c0a      	lsrs	r2, r1, #16
 8001198:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024 ;
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <main+0x144>)
 800119c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a0:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry =task2;
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <main+0x144>)
 80011a4:	4a37      	ldr	r2, [pc, #220]	; (8001284 <main+0x148>)
 80011a6:	609a      	str	r2, [r3, #8]
	Task2.Priority= 3 ;
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <main+0x144>)
 80011aa:	2203      	movs	r2, #3
 80011ac:	711a      	strb	r2, [r3, #4]
	strcpy (Task2.TaskName, "task_2");
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <main+0x14c>)
 80011b0:	4a36      	ldr	r2, [pc, #216]	; (800128c <main+0x150>)
 80011b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b6:	6018      	str	r0, [r3, #0]
 80011b8:	3304      	adds	r3, #4
 80011ba:	8019      	strh	r1, [r3, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	0c0a      	lsrs	r2, r1, #16
 80011c0:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024 ;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <main+0x154>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry =task3;
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <main+0x154>)
 80011cc:	4a31      	ldr	r2, [pc, #196]	; (8001294 <main+0x158>)
 80011ce:	609a      	str	r2, [r3, #8]
	Task3.Priority= 2 ;
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <main+0x154>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	711a      	strb	r2, [r3, #4]
	strcpy (Task3.TaskName, "task_3");
 80011d6:	4b30      	ldr	r3, [pc, #192]	; (8001298 <main+0x15c>)
 80011d8:	4a30      	ldr	r2, [pc, #192]	; (800129c <main+0x160>)
 80011da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011de:	6018      	str	r0, [r3, #0]
 80011e0:	3304      	adds	r3, #4
 80011e2:	8019      	strh	r1, [r3, #0]
 80011e4:	3302      	adds	r3, #2
 80011e6:	0c0a      	lsrs	r2, r1, #16
 80011e8:	701a      	strb	r2, [r3, #0]

	Task4.Stack_Size = 1024 ;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <main+0x164>)
 80011ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f0:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry =task4;
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <main+0x164>)
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <main+0x168>)
 80011f6:	609a      	str	r2, [r3, #8]
	Task4.Priority= 1 ;
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <main+0x164>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	711a      	strb	r2, [r3, #4]
	strcpy (Task4.TaskName, "task_4");
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <main+0x16c>)
 8001200:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <main+0x170>)
 8001202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001206:	6018      	str	r0, [r3, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	8019      	strh	r1, [r3, #0]
 800120c:	3302      	adds	r3, #2
 800120e:	0c0a      	lsrs	r2, r1, #16
 8001210:	701a      	strb	r2, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <main+0x134>)
 8001214:	f7ff fcc2 	bl	8000b9c <MYRTOS_CreateTask>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4413      	add	r3, r2
 8001220:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <main+0x144>)
 8001224:	f7ff fcba 	bl	8000b9c <MYRTOS_CreateTask>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4413      	add	r3, r2
 8001230:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 8001232:	4817      	ldr	r0, [pc, #92]	; (8001290 <main+0x154>)
 8001234:	f7ff fcb2 	bl	8000b9c <MYRTOS_CreateTask>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4413      	add	r3, r2
 8001240:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task4);
 8001242:	4817      	ldr	r0, [pc, #92]	; (80012a0 <main+0x164>)
 8001244:	f7ff fcaa 	bl	8000b9c <MYRTOS_CreateTask>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4413      	add	r3, r2
 8001250:	71fb      	strb	r3, [r7, #7]


	MYRTOS_ActivateTask(&Task1);
 8001252:	4807      	ldr	r0, [pc, #28]	; (8001270 <main+0x134>)
 8001254:	f7ff fe3e 	bl	8000ed4 <MYRTOS_ActivateTask>


	MYRTOS_StartOS() ;
 8001258:	f7ff fe5a 	bl	8000f10 <MYRTOS_StartOS>

	while (1)
 800125c:	e7fe      	b.n	800125c <main+0x120>
 800125e:	bf00      	nop
 8001260:	20000464 	.word	0x20000464
 8001264:	20000000 	.word	0x20000000
 8001268:	20000474 	.word	0x20000474
 800126c:	08001370 	.word	0x08001370
 8001270:	200004d8 	.word	0x200004d8
 8001274:	08000fe9 	.word	0x08000fe9
 8001278:	200004f4 	.word	0x200004f4
 800127c:	08001378 	.word	0x08001378
 8001280:	20000568 	.word	0x20000568
 8001284:	08001045 	.word	0x08001045
 8001288:	20000584 	.word	0x20000584
 800128c:	08001380 	.word	0x08001380
 8001290:	20000520 	.word	0x20000520
 8001294:	08001095 	.word	0x08001095
 8001298:	2000053c 	.word	0x2000053c
 800129c:	08001388 	.word	0x08001388
 80012a0:	20000494 	.word	0x20000494
 80012a4:	080010e5 	.word	0x080010e5
 80012a8:	200004b0 	.word	0x200004b0
 80012ac:	08001390 	.word	0x08001390

080012b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012de:	f000 f811 	bl	8001304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e2:	f7ff ff2b 	bl	800113c <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   r0, =_estack
 80012e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80012f4:	080013a0 	.word	0x080013a0
  ldr r2, =_sbss
 80012f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80012fc:	200005b0 	.word	0x200005b0

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <__libc_init_array>:
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	2500      	movs	r5, #0
 8001308:	4e0c      	ldr	r6, [pc, #48]	; (800133c <__libc_init_array+0x38>)
 800130a:	4c0d      	ldr	r4, [pc, #52]	; (8001340 <__libc_init_array+0x3c>)
 800130c:	1ba4      	subs	r4, r4, r6
 800130e:	10a4      	asrs	r4, r4, #2
 8001310:	42a5      	cmp	r5, r4
 8001312:	d109      	bne.n	8001328 <__libc_init_array+0x24>
 8001314:	f000 f81a 	bl	800134c <_init>
 8001318:	2500      	movs	r5, #0
 800131a:	4e0a      	ldr	r6, [pc, #40]	; (8001344 <__libc_init_array+0x40>)
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <__libc_init_array+0x44>)
 800131e:	1ba4      	subs	r4, r4, r6
 8001320:	10a4      	asrs	r4, r4, #2
 8001322:	42a5      	cmp	r5, r4
 8001324:	d105      	bne.n	8001332 <__libc_init_array+0x2e>
 8001326:	bd70      	pop	{r4, r5, r6, pc}
 8001328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800132c:	4798      	blx	r3
 800132e:	3501      	adds	r5, #1
 8001330:	e7ee      	b.n	8001310 <__libc_init_array+0xc>
 8001332:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001336:	4798      	blx	r3
 8001338:	3501      	adds	r5, #1
 800133a:	e7f2      	b.n	8001322 <__libc_init_array+0x1e>
 800133c:	08001398 	.word	0x08001398
 8001340:	08001398 	.word	0x08001398
 8001344:	08001398 	.word	0x08001398
 8001348:	0800139c 	.word	0x0800139c

0800134c <_init>:
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	bf00      	nop
 8001350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001352:	bc08      	pop	{r3}
 8001354:	469e      	mov	lr, r3
 8001356:	4770      	bx	lr

08001358 <_fini>:
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	bf00      	nop
 800135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135e:	bc08      	pop	{r3}
 8001360:	469e      	mov	lr, r3
 8001362:	4770      	bx	lr
